# -*- coding: utf-8 -*-
"""Autoencoder

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n6VVM-CVAbroPYam9qYw4V5QxgsJVeLR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

from keras.models import Model, Sequential
from keras.layers import Input, Dense
from keras.utils import plot_model
iris = load_iris()
X = iris.data
Y = iris.target
X = pd.DataFrame(X)
X.columns = ['X1', 'X2', 'X3', 'X4']
X.head()
X = X.to_numpy()
sc = StandardScaler()
X_scaled = sc.fit_transform(X)
X_scaled_train, X_scaled_test = train_test_split(X, test_size=0.3)
X.shape
input_dim = X_scaled.shape[1]
encoding_dim=2
input_layer = Input(shape=(input_dim,))  
encoded_layer = Dense(encoding_dim,activation='linear')(input_layer)
decoded_layer = Dense(input_dim,activation='linear')(encoded_layer) 
autoencoder = Model(input_layer, decoded_layer)
autoencoder.compile(optimizer='adam',loss='mse')

plot_model(autoencoder, to_file='model.png', show_shapes=True)
history = autoencoder.fit(X_scaled_train, X_scaled_train, epochs=1000, batch_size=16, validation_data=(X_scaled_test, X_scaled_test), verbose=0)
plt.figure(figsize=(9,7))
plt.title("LOSS AND VAL_LOSS VS EPOCHS")
plt.plot(history.history['loss'], color='b')
plt.plot(history.history['val_loss'], color='r')
plt.legend(["LOSS", "VAL_LOSS"], loc='best')
plt.show()
X_scaled_pred = autoencoder.predict(X_scaled_test)
def graph(test, pred):
    n = len(test[0])
    if n==2:
        fig = plt.figure(figsize=(16,5))
    else:
        fig = plt.figure(figsize=(16,10))
    
    for i in range(1, n+1):
        if n==2:
            fig.add_subplot(1, 2, i)
        else:
            fig.add_subplot(2, 2, i)

        plt.title('Predictions for X' + str(i))
        plt.plot(list(range(1, len(test)+1)), [j[i-1] for j in test], marker='o', color='b')
        plt.plot(list(range(1, len(test)+1)), [j[i-1] for j in pred], marker='o', color='r')
        plt.legend(['Testing Points',  'Predicted Points'], loc='best')

    plt.show()
graph(X_scaled_test, X_scaled_pred)

